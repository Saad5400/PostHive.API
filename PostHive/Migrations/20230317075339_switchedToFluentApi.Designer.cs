// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PostHive.Data;

#nullable disable

namespace PostHive.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230317075339_switchedToFluentApi")]
    partial class switchedToFluentApi
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CommentUser", b =>
                {
                    b.Property<string>("UpvotedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UpvotedCommentsId")
                        .HasColumnType("int");

                    b.HasKey("UpvotedById", "UpvotedCommentsId");

                    b.HasIndex("UpvotedCommentsId");

                    b.ToTable("UserUpvotedComments", (string)null);
                });

            modelBuilder.Entity("CommentUser1", b =>
                {
                    b.Property<string>("DownvotedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DownvotedCommentsId")
                        .HasColumnType("int");

                    b.HasKey("DownvotedById", "DownvotedCommentsId");

                    b.HasIndex("DownvotedCommentsId");

                    b.ToTable("UserDownvotedComments", (string)null);
                });

            modelBuilder.Entity("PostHive.Model.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int?>("RepliedToCommentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostId");

                    b.HasIndex("RepliedToCommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PostHive.Model.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("PostHive.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PostUser", b =>
                {
                    b.Property<string>("UpvotedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UpvotedPostsId")
                        .HasColumnType("int");

                    b.HasKey("UpvotedById", "UpvotedPostsId");

                    b.HasIndex("UpvotedPostsId");

                    b.ToTable("UserUpvotedPosts", (string)null);
                });

            modelBuilder.Entity("PostUser1", b =>
                {
                    b.Property<string>("DownvotedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DownvotedPostsId")
                        .HasColumnType("int");

                    b.HasKey("DownvotedById", "DownvotedPostsId");

                    b.HasIndex("DownvotedPostsId");

                    b.ToTable("UserDownvotedPosts", (string)null);
                });

            modelBuilder.Entity("CommentUser", b =>
                {
                    b.HasOne("PostHive.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UpvotedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostHive.Model.Comment", null)
                        .WithMany()
                        .HasForeignKey("UpvotedCommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommentUser1", b =>
                {
                    b.HasOne("PostHive.Model.User", null)
                        .WithMany()
                        .HasForeignKey("DownvotedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostHive.Model.Comment", null)
                        .WithMany()
                        .HasForeignKey("DownvotedCommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostHive.Model.Comment", b =>
                {
                    b.HasOne("PostHive.Model.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PostHive.Model.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostHive.Model.Comment", "RepliedToComment")
                        .WithMany("Replies")
                        .HasForeignKey("RepliedToCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("Post");

                    b.Navigation("RepliedToComment");
                });

            modelBuilder.Entity("PostHive.Model.Post", b =>
                {
                    b.HasOne("PostHive.Model.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("PostUser", b =>
                {
                    b.HasOne("PostHive.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UpvotedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostHive.Model.Post", null)
                        .WithMany()
                        .HasForeignKey("UpvotedPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostUser1", b =>
                {
                    b.HasOne("PostHive.Model.User", null)
                        .WithMany()
                        .HasForeignKey("DownvotedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostHive.Model.Post", null)
                        .WithMany()
                        .HasForeignKey("DownvotedPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostHive.Model.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("PostHive.Model.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("PostHive.Model.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
